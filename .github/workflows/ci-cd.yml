name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.3'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: expensetracker
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..60}; do
          if pg_isready -h localhost -p 5432 -U test_user; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/60)"
          sleep 2
        done

        # Test actual connection and create database if needed
        echo "Testing database connection..."
        PGPASSWORD=test_pass psql -h localhost -p 5432 -U test_user -d postgres -c "SELECT 1;" || {
          echo "Failed to connect to PostgreSQL"
          exit 1
        }

        # Create test database if it doesn't exist
        echo "Creating test database..."
        PGPASSWORD=test_pass psql -h localhost -p 5432 -U test_user -d postgres -c "CREATE DATABASE expensetracker_test;" || echo "Database already exists"

    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/expensetracker_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_pass
        SPRING_PROFILES_ACTIVE: test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Gradle Tests
        path: build/test-results/test/*.xml
        reporter: java-junit

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/test-results/

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts
        path: build/libs/*.jar

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Run dependency check
      run: ./gradlew dependencyCheckAnalyze
      continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts
        path: build/libs/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: scp, docker deploy, kubernetes apply, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://yourapp.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts
        path: build/libs/

    - name: Create deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false
          });

    - name: Deploy to production
      run: |
        echo "ðŸš€ Starting production deployment..."
        echo "ðŸ“¦ Artifact: $(ls build/libs/)"
        echo "ðŸ”— Commit: ${{ github.sha }}"
        echo "ðŸ‘¤ Deployed by: ${{ github.actor }}"

        # Add your actual production deployment commands here
        # Examples:
        # docker build -t expense-tracker:${{ github.sha }} .
        # docker push your-registry/expense-tracker:${{ github.sha }}
        # kubectl set image deployment/expense-tracker app=your-registry/expense-tracker:${{ github.sha }}

        echo "âœ… Production deployment completed successfully!"

    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: '${{ steps.create-deployment.outputs.deployment_id }}',
            state: status,
            description: status === 'success' ? 'Deployment successful' : 'Deployment failed',
            environment_url: 'https://yourapp.com'
          });
